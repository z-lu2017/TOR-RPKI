# TOR-RPKI

This project simulates TOR's guard relay selection process using our discount and matching selection algorithms.

## Description

This python simulator simultates TOR’s guard relay selection process. The simulator selects a guard relay based on the chosen method (discount or matching) and creates client objects to mimic the relay selection process in the actual TOR network. The simulator also monitors the network load and performs dyanimc load balancing in the simulation. For matching algorithm, the updated relay weights are computed using linear optimization. See the [paper](https://www.google.com) for detail.

## Getting Started

### Dependencies

* Describe any prerequisites, libraries, OS version, etc., needed before installing program.
* ex. Windows 10

### Data and sources: All data can be found [here](https://drive.google.com/drive/folders/1MS1V9wOVQeMj2WOlygidzzyeXcTYHJ6F?usp=drive_link), if you prefer to download the data yourself, the link can be found in the detailed description. Make sure to follow the directory structure.
* Consensuses data:[Tor Metrics](https://metrics.torproject.org/collector.html). Extract ** 
* Routing data: [RouteViews](https://archive.routeviews.org/). Extract **routeviews.zip**  to root directory, it will create a folder named **routeviews**.
* Route Origin Authorization (ROAs): [RIPE_RPKI_archive](https://ftp.ripe.net/rpki/). Extract **ROAs.zip** and **mergedROAs.zip** to root directory, it will create two floders named **ROAs** and **mergedROAs**. Can also run ```python3 getROA.py``` to download ROA data from 2021-01-01 to 2024-05-31 directly and it will create a folder named **ROAs** for the raw ROAs and a folder named **mergedROAs** in the root directory. 
* Route Origin Validation (ROVs):
	* [ROV monitor](https://rov.rpki.net/): Originally proposed by [Reuter et al.](https://doi.org/10.1145/3211852.3211856). Link may not be accesible. Run ```python3 getROV-RPKI.py``` to compile a list stored in **ASNwROV.pickle** in the root directory. This list is compiled from parsing a static page from ROV monitor on 2024-05. 
	* [MANRS](https://github.com/CAIDA/MANRS_Data_Analysis): Measurement produced by [Du et al.](https://doi.org/10.1145/3517745.3561419). Two lists are compiled. **manrs-rov-high.txt** and **manrs-rov-low.txt** are used.
	* [RoVista](https://rovista.netsecurelab.org): Measurement performed by [Li et al.](https://dl.acm.org/doi/10.1145/3618257.3624806). **rovista.txt** is obtained from their published data.
	* [Routeservers](https://sit4.me/rpki): Measurement performed by [Hlavacek et al.](https://dl.acm.org/doi/10.5555/3620237.3620508). **protected.txt** is obtained from the source code.
* Other data:
	* [Inferred AS to Organization Mapping Dataset](https://www.caida.org/catalog/datasets/as-organizations/): **20240401.as-org2info.txt** is used.

### Installing

* How/where to download your program
* Any modifications needed to be made to files/folders

### Executing program

* How to run the program
* Step-by-step bullets
```
code blocks for commands
```

## Help

Any advise for common problems or issues.
```
command to run if program contains helper info
```

## Authors

Contributors names and contact info

ex. Dominique Pizzie  
ex. [@DomPizzie](https://twitter.com/dompizzie)

## Version History

* 0.2
    * Various bug fixes and optimizations
    * See [commit change]() or See [release history]()
* 0.1
    * Initial Release

## License

This project is licensed under the [NAME HERE] License - see the LICENSE.md file for details

## Acknowledgments

Inspiration, code snippets, etc.
* [awesome-readme](https://github.com/matiassingers/awesome-readme)
* [PurpleBooth](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)
* [dbader](https://github.com/dbader/readme-template)
* [zenorocha](https://gist.github.com/zenorocha/4526327)
* [fvcproductions](https://gist.github.com/fvcproductions/1bfc2d4aecb01a834b46)


# TOR-RPKI
This python simulator simultates the TOR’s guard relay selection process. The consensus file from Tor Metrics are used to simulate to network environment, including the relay status and bandwidth. Then, the simulator selects a guard relay based on the chosen method (discount or matching) and creates client objects to mimic the relay selection process in the actual TOR network. ROA/ROV coverage for guard relays are obtained from various sources listed in the paper and ROA-ROV matching is performed using updated weights computed from linear optimization. See the paper for detail.

## Mini Tutorial
Preprocessing Consensus:
The consensus file we downloaded from Tor Metrics need to be parsed and checked for RPKI coverage for future analysis. We parse these file once and pickle them (python’s library for converting object into byte string) for later use, so we don’t have to process the raw data everytime. 

0. Install [virtual environment](https://www.cs.virginia.edu/wiki/doku.php?id=linux_python_tips&s[]=source&s[]=local&s[]=env&s[]=bin&s[]=activate) if neded, and download all neccessary libraries.
1. Download TOR Consensus file from TOR Metrics and store in the  tor-rpki/archive folder and de-compress it. 
2. . 
3. Go to the output folder within the de-compressed ROA folder and copy the only .csv file into the tor-rpki folder 
4. !!(ignore this step, updated code to take in different format)!!Run convertData.py to convert the .csv file into the readable form 
5. Run preprocessConsensus.py fill in the time period corresponding to the consensus file and also put the whole path to the .csv file for ROA validation. If this is your first time running a consensus that is half a year away from the previous consensus, you would want to put make_pickle = True, existing_file = False in the pre_asn function. In this way, it makes a new pickle file for the  ip -> asn map so later consensus could use this more recent file to achieve a faster runtime 
